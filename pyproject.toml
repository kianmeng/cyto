[build-system]
# We can't use poetry-core, since there is a compatbility issue with
# the poetry-dynamic-versioning plug-in and tox-poetry-dev-dependencies.
build-backend = "poetry.masonry.api"
requires = ["poetry>=1.0.0", "poetry-dynamic-versioning"]

[tool.poetry]
authors = ["Frederik Peter Aalund <fpa@sbtinstruments.com>"] 
description = "SBT Instruments' framework for Python-based applications" 
license = "MIT" 
name = "cyto" 
readme = "README.md" 
version = "0.0.0" # Placeholder (we use the poetry-dynamic-versioning plug-in)

[tool.poetry.dependencies]
anyio = "^2.0.2"
pydantic = {git = "https://github.com/kozlek/pydantic.git", rev = "e8d65f67a0671e9086a599243fc6820a90b74635"}
python = "^3.8"
toml = "^0.10.2"

[tool.poetry.dev-dependencies]
black = "^20.8b1"
isort = "^5.6.4"
mypy = "^0.790"
pre-commit = "^2.8.2"
pyfakefs = "^4.2.1"
pylint = "^2.6.0"
pytest = "^6.1.2"
pytest-cov = "^2.10.1"
taskipy = "^1.4.0"
# We only use rope to give Visual Studio Code users a better
# experience out-of-the-box. For, e.g., refactoring.
# In other words, rope is not part of the QA tooling itself.
rope = "^0.18.0"

[tool.poetry-dynamic-versioning]
enable = true

[tool.taskipy.tasks]
black = "black cyto tests"
isort = "isort cyto tests"
mypy = "mypy cyto tests"
pre-commit = "pre-commit run --all-files"
pylint = "pylint cyto tests"

[tool.tox]
legacy_tox_ini = """
[tox]
isolated_build = true
envlist = clean,py38,py39,coverage
requires =
    tox-poetry-dev-dependencies

[testenv:{py38,py39}]
depends = clean
poetry_experimental_add_locked_dependencies = true
poetry_add_dev_dependencies = true
commands =
    pytest --cov=cyto --cov-append --cov-report=term-missing {env:PYTEST_ARGS:}

[testenv:clean]
basepython = python3.8
deps = coverage
skip_install = true
commands = coverage erase

[testenv:coverage]
basepython = python3.8
depends = py38,py39
deps = coverage
skip_install = true
commands =
    coverage html --precision=2
    coverage report --precision=2 --fail-under=90
"""

[tool.black]
target-version = ['py38']

[tool.isort]
profile = 'black'

[tool.pylint.master]
# i,j,k: You can use this for an integer index in a loop.
# fs: We use this in the tests to get a pyfakefs file system reference.
#     Since pytest's dependency injection is name based, we have to use
#     this exact argument name.
# tg: You can use this for an `anyio.TaskGroup`.
good-names = 'i,j,k,fs,tg' # Default is 'i,j,k,ex,Run,_'
# Increase the default values a bit. Yes, this may hurt maintainability
# ever so slightly but it increases the speed of development.
max-args = '7' # Default is 5
max-attributes = '12' # Default is 7
# Match black's default max line length
max-line-length = '88' # Default is 100

[tool.pylint.similarities]
# Imports are often duplicated. If two different files use a lot of
# the same imports, there is just no way around it. Therefore, we
# simply ignore import statements completely when we look for duplicate
# code.
ignore-imports = 'y'

[tool.pylint.'messages control']
# Note that there is an ongoing discussion about, the current
# pylint defaults:
#     https://github.com/PyCQA/pylint/issues/3512
#
# It's also interesting to note that the pylint authors disable
# some checks for the official pylint repo:
#     https://github.com/PyCQA/pylint/blob/master/pylintrc#L56

### IF YOU ENABLE A PYLINT CHECK THEN EXPLAIN WHY BELOW
enable = '''
'''

### IF YOU DISABLE A PYLINT CHECK THEN EXPLAIN WHY BELOW
#
# fixme: We use "TODO: " to note areas that we can improve.
#     It's nice to have this directly in the code in a way that
#     we can easily search for.
#     Related to: https://github.com/PyCQA/pylint/issues/2874
#
# missing-module-docstring: Who reads module docstrings anyhow?
#     the pylint authors themselves disable this check in the pylint
#     repo.
disable = '''
  fixme,
  missing-module-docstring
'''
